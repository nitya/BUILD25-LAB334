{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Evaluate and improve the quality and safety of your AI applications\"","text":""},{"location":"#workshop-description","title":"Workshop Description","text":"<p>You\u2019ve built a custom AI application grounded in your enterprise data. How do you ensure response quality and safety? Join us as we explore AI-assisted evaluation workflows with built-in and custom evaluators on Azure AI. Learn what each metric represents, then understand how to analyze the scores for your specific application. Learn why observability is key, and how the generated telemetry can be used both locally, and in the cloud, to help you assess and debug your application performance.  </p> <ul> <li>Level: Intermediate/Advanced</li> <li>Duration: 75 minutes</li> </ul>"},{"location":"#learning-objectives","title":"Learning Objectives","text":"<p>By the end of this workshop you should be able to:</p> <ol> <li>Explain key evaluation metrics and workflows for GenAIOps</li> <li>Create and run code-first evaluations with your Azure AI project</li> <li>Understand and use built-in evaluators for quality and safety</li> <li>Understand and use custom evaluators for your application needs</li> <li>Understand and use simulators to create datasets for evaluations</li> <li>Run manual evaluations and view results in the Azure AI Foundry portal</li> </ol>"},{"location":"#pre-requisites","title":"Pre-Requisites","text":"<p>IN-VENUE PARTICIPANTS: We provide an Azure subscription for your use, during the session</p> <p>To complete this lab you need:</p> <ol> <li>A personal GitHub account \u2192 create one for free if needed</li> <li>An Azure subscription \u2192 with quota for the required models</li> <li>Familiarity with Python \u2192 and usage of Jupyter notebooks</li> <li>Familiarity with Generative AI \u2192 basic tools and concepts</li> </ol> <p>AT-HOME PARTICIPANTS: We provide guidance to help you use your own Azure subscription</p>"},{"location":"#content-tracks","title":"Content Tracks","text":"<p>The in-venue sessions are 75 minutes - 15-min instructor talk with 60-mins hands-on labs. The lab is also setup for self-paced learning (no time limit) using your own subscription at home.</p> <p>To support both kinds of learning (time-constrained in venue, self-paced at home) we have organized content into two \"tracks\"</p> <ol> <li>Workshop - this track is for the in-venue attendees. Our goal is to get you through the content within 60 minutes while meeting the learning objectives.</li> <li>Homework - this tracks is for continuing the learning journey at home. This allows you to build on what you learned in venue and explore at your own pace.</li> </ol> <p>In-Venue Attendees: You will have a personal copy of this repo by the end of the workshop</p> <p>You can now revisit the repo at home, with your own subscription, to explore all the content at your own pace - with your personal subscription. The workshop track till also identify Homework segments that we encourage you to try out at home, to further build intuition for that specific topic.</p>"},{"location":"#questions-feedback","title":"Questions &amp; Feedback","text":"<p>We welcome feedback to help us improve the learning experience. </p> <ol> <li>File an issue. We welcome feedback on ways to improve the workshop for future learners.</li> <li>Join the Azure AI Foundry Discord. Meet Azure AI community members and share insights.</li> <li>Visit the Azure AI Foundry Developer Forum. Get the latest updates on Azure AI Foundry.</li> </ol>"},{"location":"1-Workshop/01-Setup/00/","title":"1. Overview","text":"<p>BY THE END OF THIS SECTION YOU SHOULD BE ABLE TO</p> <ul> <li>Explain the role of evaluations in the GenAIOps lifecycle</li> <li>Understand the key tools and capabilities of the Azure AI Evaluations SDK</li> <li>Understand how to apply these learnings to a relevant application scenario</li> </ul> <p>IN-VENUE LEARNERS: Skip to the next section! This content was covered by instructors</p>"},{"location":"1-Workshop/01-Setup/00/#introduction","title":"Introduction","text":"<p>Generative AI Operations (GenAIOps), refers to the practice of managing, evaluating, and improving generative AI systems to ensure they produce trustworthy, reliable, and safe outputs throughout their lifecycle. The GenAIOps cycle can be viewed as 3 stages:</p> <ol> <li>Model Selection - the first step is to find the right model for your needs</li> <li>App Development - the next step is to customize model behavior to suit requirements</li> <li>Operationalization - the last step is to monitor and optimize apps in production</li> </ol> <p></p> <p>Evaluations are critical to this process, helping us gain user confidence and trust in the quality and safety of our applications at each step:</p> <ol> <li>Model Selection - use a relevant dataset to evaluate models for fit</li> <li>App Development - use built-in and custom evaluators to assess quality and safety</li> <li>Operationalization - use tools to analyze results and optimize apps continuously</li> </ol>"},{"location":"1-Workshop/01-Setup/00/#application-scenario","title":"Application Scenario","text":"<p>Understanding complex concepts is easier if we have an application scenario that we can use to contextualize the discussion. Let's revisit this popular application scenario. Contoso Outdoors is a fictional enterprise retailer that sells outdoor hiking and camping equipment on their website. The figure shows a mockup of that experience.</p> <p></p> <p>The popularity of the site has created a bottleneck for customer support. So they have asked you to build Contoso Chat - a RAG-based retail copilot that can answer questions grounded in the product catalog and customer purchase history.</p> <p></p> <p>NOTE: This workshop does NOT build Contoso Chat.</p> <p>We are using the application scenario to frame the discussion on evaluation in a real-world context. However, each lab will use a toy dataset or app to teach the tools, metrics, and processes for evaluation. If you are interested in learning to build Contoso Chat as an application, check out our previous AI Tour Workshops for details.</p> <p>You are a new hire in that team - and you are tasked with the following:</p> <ol> <li>Model Selection - find us the right model to use for the job</li> <li>Evaluation Dataset - get us the right dataset to use for evaluations</li> <li>Evaluation Metrics - identify evaluators we should use for quality &amp; safety</li> <li>Custom Evaluators - identify gaps in evaluation metrics that we should fill</li> </ol> <p>What do you do? Let's take you on the developer journey for evaluation.</p>"},{"location":"1-Workshop/01-Setup/00/#developer-journey","title":"Developer Journey","text":"<p>The storyboard below visualizes the typical developer journey into evaluations. In this lab, we will cover many of these elements in the Workshop track - and provide bonus labs in the Homework track to help you continue the learning journey.</p> <p></p>"},{"location":"1-Workshop/01-Setup/00/#setup-create-ai-project","title":"Setup: Create AI Project","text":"<p>Our application scenario requires model responses to be grounded in data. We will:</p> <ul> <li>Setup an Azure AI project with an Azure AI Search resource connected</li> <li>Upload our data and establish a search index for knowledge retrieval</li> <li>We are now ready to take the next step in our GenAIOps workflow</li> </ul> <p>In Lab 334, we'll use a deployed version of Contoso Chat as our default Azure AI Foundry project</p>"},{"location":"1-Workshop/01-Setup/00/#step-1-evaluate-base-models","title":"Step 1: Evaluate Base Models","text":"<p>Next, we need to select the right model to prototype our application. We can:</p> <ul> <li>Deploy one or more models from the model catalog to choose from</li> <li>Use the default benchmarks to compare and filter down the choices</li> <li>Use manual evaluations to assess responses against test prompts - without code!</li> <li>We can also use code-first approaches to compare models from code</li> </ul> <p>At the end of this step, you should have selected your chat model for app prototyping</p>"},{"location":"1-Workshop/01-Setup/00/#step-2-create-test-dataset","title":"Step 2: Create Test Dataset","text":"<p>Next, we need a way to assess the quality and safety of our application prototype, as we develop it. Because these AI models are stochastic, we need to test them with a broad set of relevant \"test prompts\" to make sure they follow the guidelines we provide for responses.</p> <p>You have three options:</p> <ol> <li>Bring your own data - the problem is most applications don't have historical query data.</li> <li>Create data manually - the problem is this requires non-trivial effort and has coverage gaps.</li> <li>Use a simulator - the Azure AI Evalution SDK creates synthetic dataset from search indexes.</li> <li>Use adversarial simulators - create synthetic datasets that test the safety of app responses.</li> </ol> <p>At the end of this step, you should have an evaluation dataset you can use consistently</p>"},{"location":"1-Workshop/01-Setup/00/#step-3-evaluate-metrics","title":"Step 3: Evaluate Metrics","text":"<p>Next, we need criteria that we can use to rate the quality and safety of generated responses.</p> <ol> <li>Use built-in quality evaluators - use standard metrics (coherence, groundedness, relevance)</li> <li>Use built-in safety evaluators - use standard metrics to detect harmful, protected content etc.</li> <li>View results for insights - use portal-based dashboards to visualize and analyze results</li> </ol> <p>At the end of this step, you should have an evaluation workflow that can run on each app iteration</p>"},{"location":"1-Workshop/01-Setup/00/#step-4-customize-metrics","title":"Step 4: Customize Metrics","text":"<p>Does your application require custom assessments outside the scope of built-in evaluators?</p> <ul> <li>Create custom evaluators - create custom prompt templates to \"judge\" model responses</li> <li>Use custom evaluators - combine built-in and custom evaluators in your evaluation workflows</li> </ul> <p>At the end of this step, you should have filled any assessment gaps from built-in metrics</p>"},{"location":"1-Workshop/01-Setup/00/#step-5-operationize-it","title":"Step 5: Operationize It","text":"<p>Think about how these evaluations can be automated to streamline usage in production:</p> <ul> <li>Red teaming agents - proactively assess safety vulnerabilities in your application</li> <li>Content filters - customize the safety levels for your application, for various categories</li> <li>Monitoring - activate tracing and get application insights for optimization and debugging</li> </ul> <p>At the end of this step, you should be able to iterate on apps in production</p>"},{"location":"1-Workshop/01-Setup/00/#references","title":"References","text":"<p>Because of time-constraints, we will only cover a subset of these steps today. But we encourage you to explore more samples and tutorials using these references</p> <ul> <li>Azure AI Documentation</li> <li>Azure Best Practices for AI</li> <li>Azure AI Evaluation Tools</li> </ul> <p>These references provide additional context and detailed guidance on the tools and techniques covered in this lab.</p>"},{"location":"1-Workshop/01-Setup/01/","title":"2. Quickstart","text":"<p>BY THE END OF THIS SECTION YOU SHOULD HAVE</p> <ul> <li>Visited the Azure portal and verified resource deployments</li> <li>Visited the Azure AI Foundry portal and verified model deployments</li> <li>Configured your local development environment for code-first usage</li> </ul> <p>SETUP WILL TAKE ABOUT 5 MINUTES TO COMPLETE - BUT WILL SPEED UP THINGS LATER!</p>"},{"location":"1-Workshop/01-Setup/01/#1-pick-your-path","title":"1. Pick Your Path","text":"<p>Before we dive into the labs, let's make sure we have our infrasructure setup correctly, and provision our local development environment to work with it. This lab is setup for use by both attendees in venue (Microsoft Build) and learners at home (self-paced). Pick your tab here. This context is automatically enforced throughout the guide, once set.</p> MSBuild AttendeeAt-Home Learner <p>You will be using a pre-provisioned Azure subscription from Skillable!</p> <ul> <li> You should have already launched the Skillable VM</li> <li> Check that you have an Azure credentials section in the VM panel (right)</li> <li> Verify that it shows a valid username and password. We'll use this later.</li> </ul> <p>You will need an Azure subscription of your own to continue!</p> <ul> <li>We will use the Contoso Chat sample for convenience</li> <li>Make sure you have a valid Azure subscription with access (and quota) for required models</li> </ul>"},{"location":"1-Workshop/01-Setup/01/#2-provision-infrastructure","title":"2. Provision Infrastructure","text":"<p>Some evaluation features are available only in select regions. We recommend using East US 2</p> MSBuild AttendeeAt-Home Learner <p>You will be using a pre-provisioned Azure subscription from Skillable!</p> <ul> <li> Navigate to the Azure portal - sign in with Skillable Azure credentials</li> <li> Verify that you have a single resource group (rg-AITOUR) - it should have 35 deployments</li> <li> Navigate to the Azure portal - sign in (select the above credential)</li> <li> Verify you have a single Azure AI project listed - click to see the detailed view</li> <li> Click the \"Models + Endpoints\" option - verify you have 3 models deployed</li> </ul> <p>Congratulations! You are ready to configure your local environment</p> <p>You will need to provision the infrastructure yourself</p> <ul> <li> Complete these steps to provision Contoso Chat - use AITOUR as the env name</li> <li> Navigate to the Azure portal - sign in with the same Azure credentials</li> <li> Verify that you have a single resource group (rg-AITOUR) - it should have 35 deployments</li> <li> Navigate to the Azure portal - sign in (select the above credential)</li> <li> Verify you have a single Azure AI project listed - click to see the detailed view</li> <li> Click the \"Models + Endpoints\" option - verify you have 3 models deployed</li> </ul>"},{"location":"1-Workshop/01-Setup/01/#3-configure-environment-vars","title":"3. Configure Environment Vars","text":"<p>From here on, both in-venue and at-home learners get the same experience</p> <ul> <li> <p>Copy the <code>.env.sample</code> to a new <code>.env</code> file</p> <pre><code>cp env.sample .env\n</code></pre> </li> <li> <p>Here's what that looks like - let's start filling in the values, next</p> <pre><code># Azure Open AI\nAZURE_OPENAI_ENDPOINT=            # Format: \"https://aoai-XXXX.openai.azure.com/\"\nAZURE_OPENAI_API_KEY=             # Format: string of numbers\nAZURE_OPENAI_DEPLOYMENT=\"gpt-4o-mini\"         \nAZURE_OPENAI_API_VERSION=\"2025-01-01-preview\"\n\n# Azure AI Foundry project\nAZURE_AI_CONNECTION_STRING=        # \"REGION;SUBSCRIPTION-ID;RESOURCEGROUP;AIPROJECT\"\nAZURE_AI_INFERENCE_ENDPOINT=       # \"https://aoai-XXXXXX.services.ai.azure.com/models\"\n\n# Comparison\nAZURE_OPENAI_GPT4_EP=              # \"https://aoai-XXXXX.openai.azure.com/openai/deployments/gpt-4/chat/completions?api-version=2025-01-01-preview\"\nAZURE_OPENAI_GPT4OMINI_EP=         # \"https://aoai-XXXXX.openai.azure.com/openai/deployments/gpt-4o-mini/chat/completions?api-version=2025-01-01-preview\"\n\n# Populate data\nCOSMOS_ENDPOINT=                   # \"https://cosmos-contoso-xxxx.documents.azure.com:443/\"\nAZURE_SEARCH_ENDPOINT=             # \"https://srch-xxx.search.windows.net\"\n</code></pre> </li> </ul>"},{"location":"1-Workshop/01-Setup/01/#31-project-overview","title":"3.1 Project Overview","text":"<p>WHY DO THIS: This configures local dev environment to talk to our Azure AI project</p> <ul> <li> <p>Return to the Azure AI Foundry portal tab in your browser. Click on the AI Project overview page. You should see a page like this, with the highlighted sections. </p> <p></p> </li> <li> <p>Use this to populate the following environment variables:</p> <ul> <li> Set <code>AZURE_OPENAI_API_KEY</code> value to the API key </li> <li> Set <code>AZURE_OPENAI_ENDPOINT</code> value to the Azure OpenAI endpoint </li> <li> Set <code>AZURE_AI_CONNECTION_STRING</code> value to the Project Connection String</li> </ul> </li> </ul>"},{"location":"1-Workshop/01-Setup/01/#32-models-endpoints","title":"3.2 Models + Endpoints","text":"<p>WHY DO THIS: This configures local dev environment to talk to specific model deployments</p> <ul> <li> <p>Next, click on Models + endpoints - you should see a list of deployed models. Verify that you see these three models listed.</p> <p></p> </li> <li> <p>Next, click on the <code>gpt-4</code> model. You should see details page as shown</p> <ul> <li> Set <code>AZURE_OPENAI_GPT4_EP=</code> value to the highlighted Target URI</li> </ul> <p></p> </li> <li> <p>Next, repeat this for the <code>gpt-4o-mini</code> model and copy its Target URI</p> <ul> <li> Set <code>AZURE_OPENAI_GPT4OMINI_EP=</code> value to this value</li> </ul> </li> </ul>"},{"location":"1-Workshop/01-Setup/01/#33-azure-portal-resources","title":"3.3 Azure Portal Resources","text":"<p>WHY DO THIS: This configures local dev environment to help populate data later</p> <ul> <li> <p>Visit the Azure Portal page - and click on the <code>rg-AITOUR</code> page</p> </li> <li> <p>You should see something like this: Check that deployments show 35 succeeded </p> </li> <li> <p>Click on the Search service in that list. You should see this:</p> <ul> <li> Set <code>AZURE_SEARCH_ENDPOINT=</code> to the URI on this page     </li> </ul> </li> <li> <p>Click on the CosmosDB resource in that list. You should see this:</p> <ul> <li> Set <code>COSMOS_ENDPOINT=</code> to the URI on this page     </li> </ul> </li> </ul>"},{"location":"1-Workshop/01-Setup/01/#4-update-user-roles","title":"4. Update User Roles","text":"<p>WHY DO THIS: Make sure your user identity has access permissions to populate data</p> <ul> <li>We're almost done! All your environment variables are ready. Our local development environment is now \"talking\" to the Contoso Chat deployment</li> <li> <p>Now, we need to populate data (setup search index and customer database) - we need permissions for this. Run this script in the VS Code terminal. It should complete in 1-2 minutes. Congratulations - you now have the right roles to update resources</p> <pre><code>./scripts/update-roles.sh\n</code></pre> </li> </ul>"},{"location":"1-Workshop/01-Setup/01/#5-run-notebooks","title":"5. Run Notebooks","text":"<p>WHY DO THIS: Populate the Contoso product and customer data</p>"},{"location":"1-Workshop/01-Setup/01/#51-populate-cosmosdb","title":"5.1 Populate CosmosDB","text":"<ol> <li>Open the `scripts/data/customer_info/create-cosmos-db.ipynb_ notebook</li> <li>Select Kernel - use the default Python environment</li> <li>Run All - congratulations! You have customer data!</li> </ol>"},{"location":"1-Workshop/01-Setup/01/#52-populate-azure-ai-search","title":"5.2 Populate Azure AI Search","text":"<ol> <li>Open the `scripts/data/product_info/create-azure-search.ipynb_ notebook</li> <li>Select Kernel - use the default Python environment</li> <li>Run All - congratulations! You have a product index!</li> </ol> <p>Congratulations - Setup is complete! We can now proceed to doing the labs</p>"},{"location":"1-Workshop/02-Evaluation-Portal/00/","title":"Lab 1: Manual Evaluation","text":""},{"location":"1-Workshop/02-Evaluation-Portal/01/","title":"Lab 2: Add Your Data","text":""},{"location":"1-Workshop/03-Evaluation-SDK/00/","title":"Lab 1: Use Evaluation SDK","text":""},{"location":"1-Workshop/03-Evaluation-SDK/01/","title":"Lab 2: Model Selection","text":""},{"location":"1-Workshop/04-Simulator/01/","title":"Lab 1: Generate From Index","text":""},{"location":"1-Workshop/04-Simulator/02/","title":"Lab 2: Generate Adversarial","text":""},{"location":"1-Workshop/05-Evaluators/01/","title":"Lab 1: Quality Metrics","text":""},{"location":"1-Workshop/05-Evaluators/02/","title":"Lab 1. Custom Evaluators","text":""},{"location":"1-Workshop/06-Summary/01/","title":"Wrap-Up","text":"<p>Please take a minute to provide feedback to help us make this lab better!</p> <p>TODO: Put survey links and details here</p> <p>Found the lab useful? Star the repo and watch for regular updates in lab content</p> <p>TODO: Put badge for repo</p>"},{"location":"1-Workshop/06-Summary/01/#1-lab-334-teardown","title":"1. Lab-334 Teardown","text":"<p>IN-VENUE PARTICIPANTS: Please \"End Session\" on Skillable VM To Release Resources</p> <p>This lab uses GitHub Codespaces as the development environment. </p> <ul> <li>Personal accounts have a free quota - let's conserve it.</li> <li>Commit all your changes to your personal fork first</li> <li>Click \"Delete Codespaces\" - release CPU and Storage quotas.</li> </ul> <p>This lab uses Azure AI Search and Azure Open AI models.</p> <ul> <li>(In-Venue) - just \"Kill Session\" on the Skillable VM to release resources</li> <li>(At-Home) - delete the resource group (and purge soft-deleted resources)</li> </ul>"},{"location":"1-Workshop/06-Summary/01/#2-lab-334-recap","title":"2. Lab-334 Recap","text":"<p>Let's recap what we did today. In this workshop, you learned:</p> <ol> <li>To use the Azure AI Portal for manual evaluation</li> <li>To use the Azure AI Evaluations SDK for code-first evaluation</li> <li>To use the Simulator to generate evaluation datasets</li> <li>To use the Built-in evaluators for quality &amp; safety assessment</li> <li>To create a Custom evaluator for your application needs</li> </ol> <p></p> <p>Along the way, you got a better intuition for how evaluations play a critical role in every stage of the Generative AI Ops journey</p>"},{"location":"1-Workshop/06-Summary/01/#3-next-steps","title":"3. Next Steps","text":"<p>Here are a few steps you can take, to keep learning!</p> <ol> <li>Homework \ud83d\udc49\ud83c\udffd you have a personal copy of this repo. Treat it as a sandbox and revisit the labs at home, with your own Azure subscription. Work at your own pace - and explore all the homework segments.</li> <li>Discussion \ud83d\udc49\ud83c\udffd have questions or comments? Join the discussion board for this lab and share your ideas and feedback with us. Ask clarifying questions - and build intuition for usage with your applications.</li> <li>Community \ud83d\udc49\ud83c\udffd want to stay in the loop on AMA, Training events and more? Join the Azure AI Foundry Discord! Join our vibrant community of AI learners, enthusiasts and practitioners. Keep learning!</li> </ol>"},{"location":"1-Workshop/06-Summary/01/#4-resources","title":"4. Resources","text":"<ol> <li>Evaluation of generative AI applications - documentation</li> <li>Azure AI Samples for evaluations - code-first</li> <li>Azure AI Evaluation package (Python) - API reference </li> </ol>"},{"location":"2-Homework/01-Bonus-Labs/","title":"Bonus Labs","text":""},{"location":"2-Homework/01-Bonus-Labs/#1-simulate-adversarial","title":"1. Simulate: Adversarial","text":""},{"location":"2-Homework/01-Bonus-Labs/#2-evaluate-app-target","title":"2. Evaluate: App Target","text":""},{"location":"2-Homework/01-Bonus-Labs/#3-evaluate-agent-metrics","title":"3. Evaluate: Agent Metrics","text":""},{"location":"2-Homework/01-Bonus-Labs/#4-operationalize-red-teaming","title":"4. Operationalize: Red Teaming","text":""},{"location":"2-Homework/01-Bonus-Labs/#5-operationalize-observability","title":"5. Operationalize: Observability","text":""},{"location":"2-Homework/02-Contoso-Chat/01-Setup/0-PreRequisites/","title":"Pre-Requisites","text":"<p>You must have a GitHub account to get started. Take a minute to sign up for a free account if you don't currently have one. Then check your workshop tab below for additional details.</p> Self-GuidedMicrosoft AI TourMicrosoft Ignite <p>1. What You Will Need</p> <ol> <li>Your own laptop.<ul> <li>Any laptop capable of running a modern browser (and GitHub Codespaces) will do.</li> <li>We recommend having recent version of the Edge, Chrome or Safari browser installed.</li> <li>Make sure your laptop is fully-charged (or connected to power) for the duration of lab.</li> </ul> </li> <li>A GitHub Account.<ul> <li>This is needed for creating a copy of the sample, and for launching GitHub Codespaces.</li> <li>We recommend using a personal (vs. enterprise) GitHub account for convenience.</li> <li>If you don't have a GitHub account, sign up for a free one now. (takes just a few mins)</li> </ul> </li> <li>An Azure Subscription.<ul> <li>This is needed for provisioning the Azure infrastructure for your AI project.</li> <li>If you don't have an Azure account, signup for a free one now. (takes just a few mins)</li> </ul> </li> </ol> 2. What You Should Know (expand to view) <ol> <li>(recommended) Familiarity with Visual Studio Code <ol> <li>The workshop is run completely in GitHub Codespaces, a virtualized Linux machine in the cloud. We do not run any code in your local laptop.</li> <li>The default editor used in GitHub Codespaces is Visual Studio Code (in browser). The VS Code development environment is pre-configured with required extensions.</li> <li>If you are familiar with Dev Containers and want to use Docker Desktop (on device), or want to connect to GitHub Codespaces from your local VS Code, feel free to do so.</li> </ol> </li> <li>(preferred) Familiarity with the <code>bash</code> shell.<ol> <li>We use <code>bash</code> in the VS Code terminal to run post-provisioning scripts if needed.</li> <li>We also use it to run Azure CLI and Azure Developer CLI commands during setup. </li> </ol> </li> <li>(preferred) Familiarity with Python and Jupyter Notebooks.<ol> <li>We'll create and run Python code scripts from the command-line in some steps.</li> <li>We'll select the Python kernel and run pre-existing Jupyter Notebooks in some steps.</li> </ol> </li> </ol> 3. What You Will Take Away (expand to view) <p>On completing this workshop, you will have:</p> <ol> <li>A personal copy of the Contoso Chat repository in your GitHub profile. This contains all the materials you need to reproduce the workshop on your own later (e.g., as a Self-Guided session).</li> <li>Hands-on understanding of the Azure AI Foundry platform and relevant developer tools (e.g., Azure Developer CLI, Prompty, Fast API) to streamline end-to-end development workflows for your own AI apps.</li> </ol> <p>ARE YOU CURRENTLY IN THE LAB SESSION? Jump to Provision &amp; Setup! to get started!</p> <p>The instructor-guided labs are setup with everything you need to get started. To get the most from this session, you should have some familiarity with Python, Jupyter Notebooks and Visual Studio Code. If you revisit the workshop later at home, use the Self-Guided version instead.</p> <p>ARE YOU CURRENTLY IN THE LAB SESSION? Jump to Provision &amp; Setup! to get started!</p> <p>The instructor-guided labs are setup with everything you need to get started. To get the most from this session, you should have some familiarity with Python, Jupyter Notebooks and Visual Studio Code. If you revisit the workshop later at home, use the Self-Guided version instead.</p>"},{"location":"2-Homework/02-Contoso-Chat/01-Setup/1-Provision-And-Setup/","title":"1. Provision &amp; Setup","text":"<p>To get started building our custom copilot, we need to:</p> <ul> <li>PROVISION Azure infrastructure with the resources needed for our application architecture</li> <li>SETUP our development environment and configure it to work with the infrastructure</li> <li>VALIDATE that setup completed, before we dive into the ideation phase.</li> </ul> Self-GuidedMicrosoft AI TourMicrosoft Ignite <p>You need to provision the infrastructure yourself! Jump to the Self-Guided Section now!</p> <p>You will use a pre-provisioned VM from Skillable! Jump ahead to the Skillable-Based Section.</p> <p>You will use a pre-provisioned VM from Skillable! Jump ahead to the Skillable-Based Section.</p>"},{"location":"2-Homework/02-Contoso-Chat/01-Setup/1-Provision-And-Setup/01-Self-Guided/","title":"A. Self-Guided Setup","text":"<p>Welcome to the Self-Guided Lab Track! \u00b7 Want the In-Venue Skillable Track instead? Go here</p>"},{"location":"2-Homework/02-Contoso-Chat/01-Setup/1-Provision-And-Setup/01-Self-Guided/#1-review-pre-requisites","title":"1. Review Pre-Requisites","text":"<p>You need a valid Azure subscription, GitHub account, and access to relevant Azure OpenAI models, to complete this lab on your own. You'll need to provision the infrastructure yourself, as described below. Review the Pre-Requisites section if you need more details.</p>"},{"location":"2-Homework/02-Contoso-Chat/01-Setup/1-Provision-And-Setup/01-Self-Guided/#2-launch-github-codespaces","title":"2. Launch GitHub Codespaces","text":"<p>Our development environment uses a Visual Studio Code editor with a Python runtime. The Contoso Chat sample repository is instrumented with a dev container which specifies all required tools and dependencies. At the end of this step you should have:</p> <ul> <li> Launched GitHub Codespaces to get the pre-built dev environment.</li> <li> Fork the sample repo to your personal GitHub profile.</li> </ul>"},{"location":"2-Homework/02-Contoso-Chat/01-Setup/1-Provision-And-Setup/01-Self-Guided/#21-navigate-to-github-login","title":"2.1 Navigate to GitHub &amp; Login","text":"<ol> <li>Open a browser tab (T1) and navigate to the link below.         Tip: Click the icon at far right to copy link<pre><code>https://aka.ms/contoso-chat/prebuild\n</code></pre></li> <li>You will be prompted to log into GitHub. Login now with your GitHub profile.</li> </ol>"},{"location":"2-Homework/02-Contoso-Chat/01-Setup/1-Provision-And-Setup/01-Self-Guided/#22-setup-github-codespaces","title":"2.2 Setup GitHub Codespaces","text":"<ol> <li> <p>You will see a page titled \"Create codespace for Azure-Samples/contoso-chat\"</p> <ul> <li>Check that the Branch is <code>msignite-LAB401</code></li> <li>Click dropdown for 2-core and verify it is <code>Prebuild ready</code></li> </ul> <p>Using the pre-build makes the GitHub Codespaces load up faster.</p> </li> <li> <p>Click the green \"Create codespace\" button</p> <ul> <li>You should see a new browser tab open to a link ending in <code>*.github.dev</code></li> <li>You should see a Visual Studio Code editor view loading (takes a few mins)</li> <li>When ready, you should see the README for the \"Contoso Chat\" repository</li> </ul> <p>Do NOT Follow those README instructions. Continue with this workshop guide!</p> </li> </ol>"},{"location":"2-Homework/02-Contoso-Chat/01-Setup/1-Provision-And-Setup/01-Self-Guided/#23-fork-repo-to-your-profile","title":"2.3 Fork Repo To Your Profile","text":"<p>The Codespaces is running on the original Azure Samples repo. Let's create a fork from Codespaces, so we have a personal copy to modify. For convenience, we'll follow this process which streamlines the process once you make any edit.</p> <ol> <li> <p>Lets create an empty file from the VS Code Terminal.</p> Tip: Click the icon at far right to copy command<pre><code>touch .workshop-notes.md\n</code></pre> </li> <li> <p>This triggers a notification (blue \"1\") in Source Control icon on sidebar</p> </li> <li>Click the notification to start the Commit workflow </li> <li>Enter a commit message (\"Forking Contoso Chat\") and click \"Commit\"</li> <li>You will now be prompted to \"Publish Branch\" <ul> <li>You should see 2 options (remote = original repo, origin = your fork)</li> <li>Select the <code>origin</code> option (verify that the URL is to your profile)</li> </ul> </li> <li>This will create a fork of the repository in your profile<ul> <li>It also updates the GitHub Codespaces to use your fork for commits</li> <li>You are now ready to move to the next step!</li> </ul> </li> </ol>"},{"location":"2-Homework/02-Contoso-Chat/01-Setup/1-Provision-And-Setup/01-Self-Guided/#24-verify-dependencies","title":"2.4 Verify Dependencies","text":"<p>Use the following commands in the VS Code terminal to verify these tools are installed.</p> <p>Bash<pre><code>python --version\n</code></pre> Bash<pre><code>fastapi --version\n</code></pre> Bash<pre><code>prompty --version\n</code></pre> Bash<pre><code>az version\n</code></pre> Bash<pre><code>azd version\n</code></pre></p> <p>You are now ready to connect your VS Code environment to Azure.</p>"},{"location":"2-Homework/02-Contoso-Chat/01-Setup/1-Provision-And-Setup/01-Self-Guided/#3-authenticate-with-azure","title":"3. Authenticate With Azure","text":"<p>To access our Azure resources, we need to be authenticated from VS Code. Return to the GitHub Codespaces tab, and open up a VS Code terminal. Then, complete these two steps:</p> <p>Step 1: Authenticate with <code>az</code> for post-provisioning tasks</p> <ol> <li> <p>Log into the Azure CLI <code>az</code> using the command below. </p> Text Only<pre><code>az login --use-device-code\n</code></pre> </li> <li> <p>Copy the 8-character code shown to your clipboard, then control-click the link to visit https://microsoft.com/devicelogin in a new browser tab.</p> </li> <li> <p>Select the account with the Username shown in the Skillable Lab window. Click \"Continue\" at the <code>are you sure?</code> prompt, and then close the tab</p> </li> <li> <p>Back in the Terminal, press Enter to select the default presented subscription and tenant.</p> </li> </ol> <p>Step 2: Authenticate with <code>azd</code> for provisioning &amp; managing resources</p> <ol> <li> <p>Log into the Azure Developer CLI using the command below. </p> Text Only<pre><code>azd auth login --use-device-code\n</code></pre> </li> <li> <p>Follow the same process as before - copy code, paste it when prompted, select account.</p> </li> <li>Note: you won't need to enter the password again. Just select the Skillable lab account.</li> </ol>"},{"location":"2-Homework/02-Contoso-Chat/01-Setup/1-Provision-And-Setup/01-Self-Guided/#4-provision-deploy-app","title":"4. Provision &amp; Deploy App","text":"<p>This project is an <code>azd-template</code>! It defines infrastructure-as-code assets that are used by the Azure Developer CLI to provision and manage your solution infrastructure resources.</p> <ol> <li> <p>Provision &amp; deploy the solution with one command: <code>azd up</code></p> </li> <li> <p>You will be prompted for various inputs:</p> <ul> <li>Subscription - specify your own active Azure subscription ID</li> <li>Environment name for resource group - we recommend using <code>AITOUR</code> </li> <li> <p>Location for deployment - we recommend using <code>francecentral</code></p> <p>Refer to Region Availability guidance and pick the option with desired models and quota available.</p> </li> </ul> </li> <li> <p>Wait for the process to complete. It may take 15-20 minutes or more.</p> </li> <li>On successful completion you will see a <code>SUCCESS: ...</code> message on the console.</li> </ol>"},{"location":"2-Homework/02-Contoso-Chat/01-Setup/1-Provision-And-Setup/01-Self-Guided/#next-validate-setup","title":"Next \u2192 Validate Setup","text":""},{"location":"2-Homework/02-Contoso-Chat/01-Setup/1-Provision-And-Setup/02-Skillable/","title":"B. Skillable-Based Setup","text":"<p>This is the start of the instructor-guided track for this workshop. We use the Skillable VM - a lab-on-demand platform with a built-in Azure subscription and pre-provisioned resources - to give you a fast start. </p> <p>WERE YOU LOOKING FOR THE SELF-GUIDED OPTION INSTEAD? You can find that here.</p>"},{"location":"2-Homework/02-Contoso-Chat/01-Setup/1-Provision-And-Setup/02-Skillable/#1-launch-skillable-vm","title":"1. Launch Skillable VM","text":"<p>To continue with Skillable-based Setup, you will need the Lab Launch URL (link or QR Code) given to you by your instructor at the start of the session. On completing this step, you should have:</p> <ul> <li> The Skillable VM tab open, with the Azure subscription details shown.</li> <li> The Skillable countdown timer visible, with at least 1h 15 mins remaining.</li> <li> The <code>Deploy</code> button clicked, and showing a Successful completion message.</li> <li> This instruction guide open, with this section in focus.</li> </ul> <p>If you already completed these steps in-venue with instructor help, then skip ahead to Step 2. Otherwise, expand the section below to complete the task now.</p> GET STARTED: Launch Skillable VM, Click Deploy Button, Open Workshop Guide <p>The lab instructor should have shared a Skillable Lab link (URL or QR Code).</p> <ul> <li>Open the browser and navigate to the link - locate LAB401 in the page.</li> <li>Click the Launch button - wait till the launched page completes loading.<ul> <li>(Left) You will see a login screen - we can ignore this for now</li> <li>(Top Right) You will see a countdown timer - it should start at 1hr 15 mins. </li> <li>(Below that) You will see a Deploy button - we will use this, next.</li> <li>(Below That) You should see the instructions panel - we'll validate this, after.</li> </ul> </li> <li>Click the Deploy button - wait till the loading progress icon stops.<ul> <li>This triggers a background task to deploy our application to Azure</li> <li>This step can take a few minutes to complete</li> <li>When done, you should see a \"Success\" dialog below the button.</li> <li>Note: The dialog may use a red background to alert you - this does not imply failure!</li> </ul> </li> <li>Review other Instructions Panel details:<ul> <li>Check the lab title - should be Build a Retail Copilot Code-First on Azure AI</li> <li>Check the Azure subscription - should have username &amp; password details filled in</li> <li>Check the Workshop guide link - should open to a hosted version of this guide.</li> </ul> </li> </ul> <p>Leave the Skillable tab open in your browser. We'll use the Azure credentials in the next step. And we'll revisit this tab at the end, to complete lab teardown. You can also track remaining lab time in the countdown timer.</p>"},{"location":"2-Homework/02-Contoso-Chat/01-Setup/1-Provision-And-Setup/02-Skillable/#2-launch-github-codespaces","title":"2. Launch GitHub Codespaces","text":"<p>The Contoso Chat sample repository is instrumented with a dev container which specifies required tools and dependencies. Simply launch this from GitHub Codespaces to get a pre-built development environment with a Visual Studio Code editor and Python runtime ready to go.</p> <p>At the end of this step you should have:</p> <ul> <li> Launched GitHub Codespaces to get the pre-built dev environment.</li> <li> Forked the sample repo to your personal GitHub profile.</li> <li> Verified that required command-line tools were installed.</li> </ul>"},{"location":"2-Homework/02-Contoso-Chat/01-Setup/1-Provision-And-Setup/02-Skillable/#21-navigate-to-github-login","title":"2.1 Navigate to GitHub &amp; Login","text":"<ol> <li> <p>Open a browser tab (T1) and navigate to the link below.</p> <p>In codeblocks like this, click the icon (far right) to copy text to clipboard!</p> <pre><code>https://aka.ms/contoso-chat/prebuild\n</code></pre> </li> <li> <p>You will be prompted to log into GitHub. Login now with your GitHub profile.</p> </li> </ol>"},{"location":"2-Homework/02-Contoso-Chat/01-Setup/1-Provision-And-Setup/02-Skillable/#22-setup-github-codespaces","title":"2.2 Setup GitHub Codespaces","text":"<ol> <li> <p>You will see a page titled \"Create codespace for Azure-Samples/contoso-chat\"</p> <ul> <li>Check branch is <code>msignite-LAB401</code> </li> <li>Check dev container config is <code>Contoso Chat (v2)</code> and region is <code>US East</code></li> <li>Click dropdown for 2-core and verify it is <code>Prebuild ready</code></li> </ul> <p>Using the pre-build option makes your GitHub Codespaces load up faster.</p> </li> <li> <p>Click the green \"Create codespace\" button</p> <ul> <li>You should see a new browser tab open to a link ending in <code>*.github.dev</code></li> <li>You should see a Visual Studio Code editor view loading (takes a few mins)</li> <li>When ready, you should see the README for the \"Contoso Chat\" repository</li> </ul> <p>The README is for information only. Please continue to follow this guide for the workshop.</p> </li> </ol>"},{"location":"2-Homework/02-Contoso-Chat/01-Setup/1-Provision-And-Setup/02-Skillable/#23-fork-repo-to-your-profile","title":"2.3 Fork Repo To Your Profile","text":"<p>Your GitHub Codespaces is running on the original Azure Samples repo for this sample. Let's fork this now, so we have a personal copy to modify and reviist. We will use the GitHub CLI to complete this in just a few quick steps!</p> <ol> <li> <p>Open the VS Code terminal and run this command to verify the GitHub CLI is installed.</p> <pre><code>gh --version\n</code></pre> </li> <li> <p>Next, run this command to authenticate with GitHub, with scope set to allow fork actions.</p> <pre><code>GITHUB_TOKEN=\"\" gh auth login --hostname github.com --git-protocol https --web --scopes workflow \n</code></pre> <p>The command ensures we complete the auth workflow from the web browser using the Git protocol over a secure HTTPS connection, and scope limited to workflow actions. Using an empty GITHUB_TOKEN ensure we don't use an existing token with broader scope. </p> </li> <li> <p>Follow the prompts to complete auth flow. (Expand the sections below for an example)</p> 1. Complete Device Activation flow <ul> <li>Say \"Yes\" when prompted to authenticate with GitHub credentials</li> <li>Copy the one-time code provided in the console</li> <li>Press \"Enter\" to open the Device Activation window</li> <li> <p>Copy the code into that window as shown below</p> <p>Here is an example of what that looks like:</p> <p></p> </li> </ul> 2. Confirm GitHub authorization scope <ul> <li>You should see this authorization dialog on activation</li> <li>Click the green \"Authorize github\" button to continue</li> <li> <p>This gives the GitHub CLI (this session) permission to do the fork</p> <p></p> </li> </ul> 3. Verify you are Logged in. <ul> <li> <p>The console log should show you are logged in successfully</p> <p></p> </li> </ul> </li> <li> <p>Now, run this command to fork the repo.</p> <pre><code>GITHUB_TOKEN=\"\" gh repo fork --remote\n</code></pre> <p>You should see a <code>Created fork..</code> followed by an <code>Added remote origin ..</code> message. On completion, you should have a fork of the repo in your personal profile and your local Codespaces environment will now be setup to commit changes to your fork.</p> </li> <li> <p>Optional. Visit your GitHub profile and check that the fork was created. It should be at the location in the form <code>https://github.com/&lt;username&gt;/contoso-chat</code> where <code>&lt;username&gt;</code> should be replaces by your GitHub profile.</p> </li> </ol>"},{"location":"2-Homework/02-Contoso-Chat/01-Setup/1-Provision-And-Setup/02-Skillable/#24-check-tools-installed","title":"2.4 Check Tools Installed","text":"<p>The workshop uses the following tools and commands: <code>python</code>, <code>fastapi</code>, <code>prompty</code>, <code>az</code>, <code>azd</code>. These are pre-installed for you, but you can optionally verify these to get a sense for their current versions.</p> (Optional: Expand to view details) Verify intalled tools. <p><pre><code>python --version\n</code></pre> <pre><code>fastapi --version\n</code></pre> <pre><code>prompty --version\n</code></pre> <pre><code>az version\n</code></pre> <pre><code>azd version\n</code></pre></p>"},{"location":"2-Homework/02-Contoso-Chat/01-Setup/1-Provision-And-Setup/02-Skillable/#3-authenticate-with-azure","title":"3. Authenticate with Azure","text":"<p>To access our Azure resources, we need to be authenticated from VS Code. Make sure the Terminal pane is active in the GitHub Codespaces tab. Then, complete both the steps below (click each to expland for instructions).</p> 1. Authenticate with <code>az</code> for post-provisioning tasks <ol> <li> <p>Log into the Azure CLI <code>az</code> using the command below. </p> <pre><code>az login --use-device-code\n</code></pre> </li> <li> <p>Copy the 8-character code shown to your clipboard, then control-click the link to visit https://microsoft.com/devicelogin in a new browser tab.</p> </li> <li> <p>Select the account with the Username shown in the Skillable Lab window. Click \"Continue\" at the <code>are you sure?</code> prompt, and then close the tab</p> </li> <li> <p>Back in the Terminal, press Enter to select the default presented subscription and tenant.</p> </li> </ol> 2. Authenticate with <code>azd</code> for provisioning &amp; managing resources <ol> <li> <p>Log into the Azure Developer CLI using the command below. </p> <pre><code>azd auth login --use-device-code\n</code></pre> </li> <li> <p>Follow the same process as before - copy code, paste it when prompted, select account.</p> </li> <li>Note: you won't need to enter the password again. Just select the Skillable lab account.</li> </ol> <p>CONGRATULATIONS. You are logged in from Azure CLI and Azure Developer CLI</p>"},{"location":"2-Homework/02-Contoso-Chat/01-Setup/1-Provision-And-Setup/02-Skillable/#4-configure-env-variables","title":"4. Configure Env Variables","text":"<p>To build code-first solutions, we will need to use the Azure SDK from our development environment. This requires configuration information for the various resources we've already provisioned for you in the <code>francecentral</code> region. Let's retrieve those now.</p> <ol> <li> <p>Run the commands below in the same Visual Studio Code terminal.</p> <p><pre><code>azd env set AZURE_LOCATION francecentral -e AITOUR --no-prompt\n</code></pre> <pre><code>azd env refresh -e AITOUR \n</code></pre></p> <p>(Press ENTER to select the default Azure subscription presented). </p> </li> <li> <p>Verify the environment variables were refreshed.</p> <p>The above commands will have created a <code>.azure/AITOUR/.env</code> file in your GitHub Codespaces environment with all the configuration information we will need to build our app. You can open the file from the VS Code file explorer or you can run the command below to view the values in the terminal:</p> <pre><code>azd env get-values\n</code></pre> <p>Note that the <code>.env</code> file does not contain any secrets (passwords or keys). Instead, we use  Azure Managed Identities for keyless authentication as a security best practice</p> </li> </ol>"},{"location":"2-Homework/02-Contoso-Chat/01-Setup/1-Provision-And-Setup/02-Skillable/#5-do-post-provisioning","title":"5. Do Post-Provisioning","text":"<p>We can now use these configured tools and SDK to perform some post-provisioning tasks. This includes populating data in Azure AI Search (product indexes) and Azure Cosmos DB (customer data), and deploying the initial version of our application to Azure Container Apps.</p> <p>Return to the Visual Studio Code Terminal above:</p> <ol> <li> <p>Run the command below. (This will take a few minutes to complete.)</p> <pre><code>bash ./docs/workshop/src/0-setup/azd-update-roles.sh\n</code></pre> <p>We pre-provisioned the Azure resources for you using a service principal. In this step, we update the resource roles to allow user access so you can populate data in Azure AI Search and Azure Cosmos DB from code. This step is not required in self-guided mode where you provision all resources yourself.</p> </li> <li> <p>Once complete, run the command below. It will take a few minutes to complete.</p> <pre><code>azd hooks run postprovision\n</code></pre> <p>This step runs the Jupyter Notebooks found in the relevant <code>data/</code> subfolders, populating the Azure AI Search and Azure CosmosDB resources with product catalog (index) and customer profile (orders).</p> <p>This step should take just a few minutes to complete from the commandline.</p> </li> </ol> <p>CONGRATULATIONS. Your Skillable-based Setup is Complete! We'll Validate this, next!</p>"},{"location":"2-Homework/02-Contoso-Chat/01-Setup/1-Provision-And-Setup/03-Validation/","title":"Validate Your Setup","text":"<p>SETUP IS COMPLETE: Let's Review where we are right now</p> <p></p> <p>We just completed the PROVISION and SETUP stages of the end-to-end workflow. </p> <ul> <li> We launched GitHub Codespaces and forked the sample repo</li> <li> We have provisioned infrastructure resources on Azure</li> <li> We authenticated with Azure and refreshed our local env vars</li> <li> We completed post-provisioning tasks to populate data</li> </ul> <p>In this section, we'll validate our setup quickly, and organize our development environment into browser tabs before we move to the IDEATE phase of development. </p>"},{"location":"2-Homework/02-Contoso-Chat/01-Setup/1-Provision-And-Setup/03-Validation/#31-azure-portal-tab","title":"3.1 Azure Portal Tab","text":"<p>The Azure Portal helps us view the resources provisioned on Azure and check that they are setup correctly</p> <p>Here's a reminder of the Azure Application Architecture - let's check our provisioned Resource Group to make sure these resources were created.</p> <p></p> <ol> <li> <p>Open a new browser tab and navigate to the link below. You may be prompted to login.     <pre><code>https://portal.azure.com/#browse/resourcegroups\n</code></pre></p> </li> <li> <p>Sign in \u2192 If prompted, use the <code>Username</code> and <code>Password</code> from the \"Azure Credentials\" section in your Skillable Lab instructions panel.</p> </li> <li>You may be presented with a \"Welcome to Microsoft Azure\" screen. Click Cancel (to dismiss it) or click Get Started (to take an introductory tour of the Azure Portal).</li> <li>You should be taken directly to the Resource Groups page for your subscription.<ul> <li>You should see an <code>rg-AITOUR</code> resource. This was created for you and contains all the resources needed to build and deploy your RAG-based copilot. </li> </ul> </li> <li>Click <code>rg-AITOUR</code> to visit the Resource Group overview page.<ul> <li>Check: Deployments (look under \"Essentials\") - You should see: 35 succeeded. </li> <li>Check: Resources (in Overview) - You should see: 15 resources.</li> </ul> </li> </ol> <p>Leave the Azure Portal open on this tab. We'll revisit it later.</p>"},{"location":"2-Homework/02-Contoso-Chat/01-Setup/1-Provision-And-Setup/03-Validation/#32-azure-ai-foundry","title":"3.2 Azure AI Foundry","text":"<p>The Azure AI Foundry portal lets us view and manage the Azure AI project for our app.</p> <ol> <li> <p>Open a new browser tab and navigate to this page:     <pre><code>https://ai.azure.com\n</code></pre></p> </li> <li> <p>Click <code>Sign in</code> \u2192 you will auto-login with the Azure credentials used to sign into the portal.</p> <ul> <li>Check: You should see a Hub resource (with a name like ai-hub-XXXXXXXX)</li> <li> <p>Check: You should see a Project resource (with a name like ai-project-XXXXXXXX)</p> <p>The Azure AI hub collects AI resources that can be shared between AI projects. The Azure AI project helps you organize your work when building applications.</p> </li> <li> <p>Click the Project link. You will be taken to a Project details page.</p> </li> <li>Click \"Connected Resources\" in the left pane,</li> <li>Check: You should see Hub connections to OpenAI endpoints, Azure AI Search &amp; Storage.</li> <li>Click \"Models + endpoints\" in the left pane.</li> <li> <p>Check: You should see deployed models for this project.</p> <p>For this application, we will use the chat completion models <code>gpt-4</code> and <code>gpt-4o-mini</code>, and the embedding model <code>text-embedding-ada-002</code>.</p> </li> </ul> </li> </ol>"},{"location":"2-Homework/02-Contoso-Chat/01-Setup/1-Provision-And-Setup/03-Validation/#33-azure-container-app-tab","title":"3.3 Azure Container App Tab","text":"<p>The Azure Container App provides the hosting environment for our copilot (API endpoint)</p> <p>Azure Container Apps will host the endpoint used to serve the Contoso Chat application on the Contoso Outdoors website. The Azure provisioning should have deployed a default Azure Container App to this endpoint.</p> <ol> <li>Return to the Azure Portal tab</li> <li>Visit the <code>rg-AITOUR</code> Resource group page</li> <li>Click the <code>Container App</code> resource to display the Overview page</li> <li>Look for <code>Application Url</code> (at top right), and click it to launch in new tab </li> <li>You should see: A <code>Hello World</code> message on the screen (confirming app was deployed)</li> </ol> <p>Azure Container Apps (ACA) is used to host our chat AI application. The application server is implemented using FastAPI and exposes a <code>/create_request</code> API endpoint to make requests to our copilot.</p>"},{"location":"2-Homework/02-Contoso-Chat/01-Setup/1-Provision-And-Setup/03-Validation/#34-check-azure-cosmos-db","title":"3.4. Check Azure Cosmos DB","text":"<p>The Azure CosmosDB resource holds the customer data for our application. It is a noSQL database that contains JSON data for each customer, and the prior purchases they made.</p> <ol> <li>Switch to the Azure Portal tab and display the <code>rg-AITOUR</code> resource group Overview</li> <li>Click the <code>Azure Cosmos DB account</code> resource name to visit its details page</li> <li>Click <code>Data Explorer</code> in the top-nav menu <ul> <li>dismiss the popup dialog to skip the movie</li> <li>see: <code>contoso-outdoor</code> container with <code>customers</code> database</li> <li>click <code>customers</code>, then select <code>Items</code></li> <li>you should see: 12 data items in database</li> </ul> </li> </ol>"},{"location":"2-Homework/02-Contoso-Chat/01-Setup/1-Provision-And-Setup/03-Validation/#35-check-azure-ai-search","title":"3.5. Check Azure AI Search","text":"<p>The Azure AI Search resources contains the product index for our retailer's product catalog. It is the information retrieval service for RAG solutions, using sentence similarity and semantic ranking to return the most relevant results for a given customer query.</p> <ol> <li>Switch to the Azure Portal tab and display the  <code>rg-AITOUR</code> resource group Overview</li> <li>Click the <code>Search service</code> resource name to visit its details page</li> <li>Click <code>Search Explorer</code> in the top-nav menu  <ul> <li>see Search explorer with default index <code>contoso-products</code></li> <li>click \"Search\" with no other input</li> <li>you will see: Results dialog filled with index data for the entire product database.</li> </ul> </li> <li>Enter <code>sleeping bag</code> in the text box, and click Search<ul> <li>Verify that the first result returned relates to a sleeping bag from the catalog       </li> </ul> <p>Check the 'value' section of the response for semantically-ranked results.</p> </li> <li>Enter <code>something to make food with</code> in the text box, and click Search       <ul> <li>Verify that the first result returned relates to a camping stove</li> </ul> </li> </ol>"},{"location":"2-Homework/02-Contoso-Chat/01-Setup/1-Provision-And-Setup/03-Validation/#36-check-azure-container-app","title":"3.6. Check Azure Container App","text":"<p>How The Custom Copilot Experience Works</p> <p>Our chat application works by sending chat messages to a custom endpoint hosted as an Azure Container App. </p> <ul> <li>The inputs to the endpoint are <ul> <li>question \u2192 the customer's chat message), </li> <li>customer_id \u2192 the logged-in customer's ID number)</li> <li>chat_history \u2192 the prior conversation, for context. </li> </ul> </li> <li>The response from the endpoint is the response returned by the chatbot.</li> </ul> <p>When iterating on a prototype application, we start with manual testing, using a single \"test prompt\" to validate our scenario. We then move to automated evaluations with larger test datasets.</p> <p>The FastAPI server exposes a <code>Swagger API</code> endpoint that we can use for manual testing in both local (Codespaces) and cloud (Container Apps). Let's try it out now!</p> <ol> <li>Return to your deployed Azure Container App tab</li> <li>Add a <code>/docs</code> suffix to the URL and browse to that path - you will see: FastAPI page</li> <li>Expand the <code>POST</code> section by clicking the arrow<ul> <li>click <code>Try it out</code> to make inputs editable</li> <li>enter <code>Tell me about your tents</code> for question</li> <li>enter <code>2</code> for customer_id</li> <li>enter <code>[]</code> for chat_history</li> <li>enter Execute to run the endpoint with the provided parameters.</li> </ul> </li> </ol> <p>You will get a response body with <code>question</code>, <code>answer</code> and <code>context</code> components. </p> <ul> <li>Check <code>question</code> -  is the customer's question the same as that typed in the chat window on the Contoso Outdoor website</li> <li>Check <code>answer</code> -  is the chatbot's response to the customer's <code>question</code>, as generated by this RAG application</li> <li>Check <code>context</code> - is the additional information provided to the Generative AI model being used by it used to ground its answer.<ul> <li>In this app, that includes information about products relevant to the customer question.</li> <li>The products selected may depend on <code>customer_id</code> and the associated order history. </li> <li>The web app provides <code>chat_history</code> from the chat window - which can serve as additional context that the model can use to ground the response.</li> </ul> </li> </ul> <p>Exercise \u2192 Repeat exercise with a different customer ID (between 1 and 12). How did the response change?</p>"},{"location":"2-Homework/02-Contoso-Chat/01-Setup/1-Provision-And-Setup/03-Validation/#37-lets-connect-the-dots","title":"3.7. Let's Connect The Dots \ud83d\udca1","text":"<p>Recall that the Retrieval Augmented Generation works by retrieving relevant knowledge from your data stores, and augmenting the user query with it to create an enhanced prompt - which generates the final response.</p> <p>To implement this RAG pattern, we need to execute three steps:</p> <ol> <li>Setup data sources and populate them with our data (product catalog, customer orders)</li> <li>Create indexes for efficient information retrieval by LLMs (e.g., find matching products)</li> <li>Connect our Azure AI project to access data/indexes code-first, for use in processing steps.</li> </ol> <p>In the previous section we setup the data sources (provisioning infra) and populated them with data (post-provisioning scripts) as follows:</p> <ol> <li>Azure CosmosDB - loaded 12 records from <code>data/customer_info</code>, got customers database.</li> <li>Azure AI Search - loaded 20 records from <code>data/product_info</code>, got contoso-products index.</li> </ol> <p>This checks off the first two idents from our RAG checklist above. Now, let's see how we can achieve the thirst ep with a code-first approach that makes use of the Azure AI Search, Azure CosmosDB and Azure OpenAI services through their Azure SDKs.</p> <p>CONGRATULATIONS. You validated your setup! It's time to IDEATE!</p>"},{"location":"2-Homework/02-Contoso-Chat/02-Prompty/","title":"Prompty-Based Evaluation","text":""},{"location":"2-Homework/02-Contoso-Chat/02-Prompty/#what-is-prompty","title":"What is Prompty?","text":"<p>Prompty is an asset format with a support tool and runtime, that helps developers speed up their inner loop for development by effectively bringing the playground experience into your editor.</p> <p>With Prompty, you can 1. Create a prompt asset using a YAML-like specification 1. Construct the prompt template using Markdown syntax 1. Add model configuration and input as frontmatter 1. Run the prompt in VS Code to see model responses 1. Refine template and configuration iteratively in editor</p>"},{"location":"2-Homework/02-Contoso-Chat/02-Prompty/#lab-1-prompty-in-action","title":"Lab 1: Prompty In Action","text":"<ol> <li>Visit <code>src/api/contoso_chat/evaluators/custom_evals/</code></li> <li>Open <code>coherence.prompty</code> in VS Code.</li> <li>Click the \"Play\" button in the editor</li> <li>Observe what happens</li> </ol> <p>You should see the VS Code Terminal switch to the Output tab and show a rating (1-5) for coherence</p>"},{"location":"2-Homework/02-Contoso-Chat/02-Prompty/#what-are-custom-evaluators","title":"What Are Custom Evaluators?","text":"<p>By default, Azure AI Evaluation has a number of built-in evaluators for quality and safety. But what if you wanted to customize the scoring for a given evaluator, or perhaps create a new evaluator for a metric (\"Complexity\") that you want to decide the scoring criteria for. Since AI-assisted evaluations are about having one model (\"judge\") rate the responses of an other model (\"app\"), we can write custom evaluators with Prompty as well.</p>"},{"location":"2-Homework/02-Contoso-Chat/02-Prompty/#lab-2-view-evaluators","title":"Lab 2: View Evaluators","text":"<p>While the Azure AI Evaluation SDK provides built-in evaluators for core quality metrics, the Contoso Chat app also has custom versions of these created to support its own requirements in additon.</p> <p>Here are the 4 metrics we want to evaluate.</p> Metric What does the metric evaluate? Coherence How well do all sentences in the ANSWER fit together?  Do they sound natural when taken as a whole? Fluency What is the quality of individual sentences in the ANSWER?  Are they well-written and grammatically correct? Groundedness Given support knowledge, does the ANSWER use the information provided by the CONTEXT? Relevance How well does the ANSWER address the main aspects of the QUESTION, based on the CONTEXT? <ol> <li>Visit <code>src/api/contoso_chat/evaluators/custom_evals/</code></li> <li>Open <code>coherence.prompty</code> in VS Code.</li> <li>Open <code>fluency.prompty</code> in VS Code.</li> <li>Open <code>relevance.prompty</code> in VS Code.</li> <li>Open <code>groundedness.prompty</code> in VS Code.</li> <li> <p>Take a minute to read the template for each</p> CLICK TO EXPAND: Coherence.prompty <pre><code>---\nname: QnA Coherence Evaluation\ndescription: Evaluates coherence score for QA scenario\nmodel:\napi: chat\nconfiguration:\n    type: azure_openai\n    azure_deployment: gpt-4\n    azure_endpoint: ${ENV:AZURE_OPENAI_ENDPOINT}\n    api_version: 2024-08-01-preview\nparameters:\n    max_tokens: 128\n    temperature: 0.2\ninputs:\nquestion:\n    type: string\ncontext:\n    type: object\nanswer:\n    type: string\nsample:\nquestion: What feeds all the fixtures in low voltage tracks instead of each light having a line-to-low voltage transformer?\ncontext: Track lighting, invented by Lightolier, was popular at one period of time because it was much easier to install than recessed lighting, and individual fixtures are decorative and can be easily aimed at a wall. It has regained some popularity recently in low-voltage tracks, which often look nothing like their predecessors because they do not have the safety issues that line-voltage systems have, and are therefore less bulky and more ornamental in themselves. A master transformer feeds all of the fixtures on the track or rod with 12 or 24 volts, instead of each light fixture having its own line-to-low voltage transformer. There are traditional spots and floods, as well as other small hanging fixtures. A modified version of this is cable lighting, where lights are hung from or clipped to bare metal cables under tension\nanswer: The main transformer is the object that feeds all the fixtures in low voltage tracks.\n---\nsystem:\nYou are an AI assistant. You will be given the definition of an evaluation metric for assessing the quality of an answer in a question-answering task. Your job is to compute an accurate evaluation score using the provided evaluation metric. You should return a single integer value between 1 to 5 representing the evaluation metric. You will include no other text or information.\n\nuser:\nCoherence of an answer is measured by how well all the sentences fit together and sound naturally as a whole. Consider the overall quality of the answer when evaluating coherence. Given the question and answer, score the coherence of answer between one to five stars using the following rating scale:\nOne star: the answer completely lacks coherence\nTwo stars: the answer mostly lacks coherence\nThree stars: the answer is partially coherent\nFour stars: the answer is mostly coherent\nFive stars: the answer has perfect coherency\n\nThis rating value should always be an integer between 1 and 5. So the rating produced should be 1 or 2 or 3 or 4 or 5.\n\nquestion: What is your favorite indoor activity and why do you enjoy it?\nanswer: I like pizza. The sun is shining.\nstars: 1\n\nquestion: Can you describe your favorite movie without giving away any spoilers?\nanswer: It is a science fiction movie. There are dinosaurs. The actors eat cake. People must stop the villain.\nstars: 2\n\nquestion: What are some benefits of regular exercise?\nanswer: Regular exercise improves your mood. A good workout also helps you sleep better. Trees are green.\nstars: 3\n\nquestion: How do you cope with stress in your daily life?\nanswer: I usually go for a walk to clear my head. Listening to music helps me relax as well. Stress is a part of life, but we can manage it through some activities.\nstars: 4\n\nquestion: What can you tell me about climate change and its effects on the environment?\nanswer: Climate change has far-reaching effects on the environment. Rising temperatures result in the melting of polar ice caps, contributing to sea-level rise. Additionally, more frequent and severe weather events, such as hurricanes and heatwaves, can cause disruption to ecosystems and human societies alike.\nstars: 5\n\nquestion: {{question}}\nanswer: {{answer}}\nstars:\n</code></pre> </li> </ol>"},{"location":"2-Homework/02-Contoso-Chat/02-Prompty/#lab-3-run-evaluators","title":"Lab 3: Run Evaluators","text":"<p>Click the <code>play</code> button in all the four prompty files you opened in the previous step, in some order. </p> <ol> <li>You should see rating show up in the console</li> <li>The rating is for the default \"question\" in the prompty</li> <li>Now visit the evaluator prompty - and see how it is defined</li> </ol> <p>Observe the following</p> <ol> <li>The system context describes the purpose of the evaluator</li> <li>The template uses few-shot prompting to give examples</li> <li>The model is then asked to evaluate the response in context</li> </ol> <p>Can you get an intuition for why the model response to the question got those ratings?</p>"},{"location":"2-Homework/02-Contoso-Chat/02-Prompty/#lab-4-create-evaluators","title":"Lab 4: Create Evaluators","text":"<p>Let's revisit the idea of a Complexity evaluation:</p> <ol> <li>The customer makes a request that is fairly complex, resulting in a response that is overly full of options - leading to decision fatigue where the customer buys nothing.</li> <li>We want the model to detect these kinds of questions and gently push back to have the customer pick one track at a time.</li> <li> <p>We want to define a complexity rating where 1 means nothing complex happened (good)) and 5 is where model is overloading customer (bad)</p> <p>Try It: Create a new custom evaluator</p> <ol> <li>Copy <code>coherence.prompty</code> to <code>complexity.prompty</code></li> <li>Update system message to reflect evaluator goal</li> <li>Write examples to reflect the complexity rating</li> <li>Test this with different prompts to see ratings</li> </ol> </li> </ol> <p>CONGRATULATIONS. You built a custom evaluator with Prompty!</p>"},{"location":"2-Homework/02-Contoso-Chat/03-Evaluations/01/","title":"1. Run Batch Evaluation","text":"<p>In the previous section, we assessed a single answer for a single metric, running one Prompty at a time. In reality, we will need to run assessments automatically across a large set of test inputs, with all custom evaluators, before we can judge if the application is ready for production use. In this exercise, we'll run a batch evaluation on our Contoso Chat application, using a Jupyter notebook.</p>"},{"location":"2-Homework/02-Contoso-Chat/03-Evaluations/01/#1-run-evaluation-notebook","title":"1. Run Evaluation Notebook","text":"<p>Navigate to the <code>src/api</code> folder in Visual Studio Code.</p> <ul> <li>Click: <code>evaluate-chat-flow.ipynb</code> - see: A Jupyter notebook</li> <li>Click: Select Kernel - choose \"Python Environments\" - pick recommended <code>Python 3.11.x</code></li> <li>Click: <code>Run all</code> - this kickstarts the multi-step evaluation flow.</li> </ul> <p>You may see a pop-up alert: <code>The notebook is not displayed in the notebook editor because it is very large</code> with two options to proceed. Select the <code>Open Anyway</code> (default) option.</p>"},{"location":"2-Homework/02-Contoso-Chat/03-Evaluations/01/#2-watch-evaluation-runs","title":"2. Watch Evaluation Runs","text":"<p>One of the benefits of using Prompty is the built-in <code>Tracer</code> feature that captures execution traces for the entire workflow. These trace runs are stored in  <code>.tracy</code> files in the <code>api/.runs/</code> folder as shown in the figure below.</p> <ul> <li>Keep this explorer sidebar open while the evaluation notebook runs/</li> <li>You see: <code>get_response</code> traces when our chat application is running</li> <li>You see: <code>groundedness</code> traces when its groundeness is evaluated</li> <li>You see: similar <code>fluency</code>, <code>coherence</code> and <code>relevance</code> traces</li> </ul> <p>These are live trace runs so you should be able to make the following observations when completed:</p> <ul> <li>There will be 12 <code>get_response</code> traces corresponding to 12 chat prompts that are executed by our chat AI.</li> <li>For each of these responses, you should see 4 traces for each of the 4 custom evaluators we have defined.</li> <li>Clicking on an <code>.tracy</code> file should open the Trace Viewer window, allowing you to dive into the data visually.</li> </ul> <p></p>"},{"location":"2-Homework/02-Contoso-Chat/03-Evaluations/01/#3-explore-evaluation-trace","title":"3. Explore: Evaluation Trace","text":"<p>OPTIONAL: Explore .tracy files with Trace Viewer</p> <p>The Prompty runtime generates <code>.tracy</code> files (underlying JSON format) that capture the execution trace from prompt (input) to response (output). This section explains how you can use the traces to view or debug workflows.</p> <p>To explore the evaluation trace:</p> <ul> <li>Wait till the batch evaluation process completes. </li> <li>Click on a <code>.tracy</code> file to launch trace viewer (see figure above). </li> </ul> <p>The trace viewer feature is experimental. You may need to click, wait, and retry a few times before the viewer loads the file successfully. Skip this section and revisit it at home if time is limited.</p> <ol> <li> <p>Observe the Trace View</p> <ul> <li>You should see a waterfall view on the left, and a detail view on the right.</li> <li>The waterfall view shows the sequence of steps in the orchestrated flow.</li> <li>\"Prompty\" icons show asset execution (load-prepare-run)</li> <li>\"Open AI\" icons show model invocations (chat, embeddings)</li> <li>Cube icons represent Python function invocations (code)</li> <li>Click an item on the left to see detailed trace on the right.</li> </ul> </li> <li> <p>Explore the <code>get_response</code> root trace</p> <ul> <li>Click the <code>get_response</code> node on left</li> <li>Observe the trace details on right</li> <li>You should see:<ul> <li>The Input query (question, customerId, chat_history)</li> <li>The Output response (question, answer)</li> <li>Total time taken for execution</li> <li>Total tokens used in execution</li> <li>Token split between prompt and completion</li> </ul> </li> </ul> </li> <li> <p>Explore a Prompty execution trace</p> </li> <li> <p>Explore the Prompty tracer code</p> </li> </ol> <p>Want to learn more about Prompty Tracing? Explore the documentation to learn how to configure your application for traces, and how to view and publish traces for debugging and observability.</p> <p>CONGRATULATIONS. You ran a batch evaluation on the chat AI application responses!</p>"},{"location":"2-Homework/02-Contoso-Chat/03-Evaluations/02/","title":"2. Understand Eval Workflow","text":"<p>The evaluation flow takes 7-9 minutes to complete. Let's use the time to explore the code and understand the underlying workflow in more detail</p> <p>ACTIVATE WORD WRAP: Many of these <code>.jsonl</code> files will contain large text strings per line. Press Alt-Z (or Cmd-Z on Mac) to toggle word wrap. This will make the data in these <code>.jsonl</code> files easier to read within the limited screen view.</p>"},{"location":"2-Homework/02-Contoso-Chat/03-Evaluations/02/#1-explore-create-response","title":"1. Explore: Create Response","text":"<ol> <li> <p>Open the file <code>src/api/evaluators/data.jsonl</code></p> <ul> <li>This file contains the suite of test questions, each associated with a specific customer.</li> <li>Sample question: \"what is the waterproof rating of the tent I bought?\"</li> </ul> </li> <li> <p>Take another look at  <code>src/api/evaluate-chat-flow.ipynb</code></p> <ul> <li>Look at Cell 3, beginning <code>def create_response_data(df):</code></li> <li>For each question in the file, the <code>get_response</code> function (from our chat application) is invoked to generate the response and associated context</li> <li>The {question, context, response} triples are then written to the <code>results.jsonl</code> file.</li> </ul> </li> </ol>"},{"location":"2-Homework/02-Contoso-Chat/03-Evaluations/02/#2-explore-evaluate-response","title":"2. Explore: Evaluate Response","text":"<ol> <li>Take another look at  <code>src/api/evaluate-chat-flow.ipynb</code><ul> <li>Look a cell 4, beginning <code>def evaluate():</code></li> <li>Observe: It loads the results file from the previous step</li> <li>Observe: For each result in file, it extracts the \"triple\"</li> <li>Observe: For each triple, it executes the 4 evaluator Promptys</li> <li>Observe: It writes the scores to an <code>result_evaluated.jsonl</code> file</li> </ul> </li> </ol> <p>You can ignore the <code>eval_results.json</code> file that is also created here. That file concatenates all the line results into a single JSON file for use in other tasks.</p>"},{"location":"2-Homework/02-Contoso-Chat/03-Evaluations/02/#3-explore-create-summary","title":"3. Explore: Create Summary","text":"<ol> <li> <p>When notebook execution completes, look in the <code>src/api/evaluators</code> folder:</p> <ul> <li>You see: Chat Responses in <code>result.jsonl</code></li> <li>You see: Evaluated Results in <code>result_evaluated.jsonl</code> (scores at end of each line)</li> <li>You see: Evaluation Summary computed from <code>eval_results.jsonl</code> (complete data.)</li> </ul> </li> <li> <p>Scroll to the bottom of the notebook to view the results cell:</p> <ul> <li>Click the <code>View as scrollable element</code> link to redisplay output</li> <li>Scroll to the bottom of redisplayed cell to view scores table</li> <li>You should see something like the table below - we reformatted it manually for clarity.</li> </ul> </li> </ol> <p></p>"},{"location":"2-Homework/02-Contoso-Chat/03-Evaluations/02/#4-understand-eval-results","title":"4. Understand: Eval Results","text":"<p>The figure shows you what that tabulated data looks like in the notebook results. Ignore the formatting for now, and let's look at what this tells us:</p> <ol> <li>You see 12 rows of data - corresponding to 12 test inputs (in <code>data.jsonl</code>)</li> <li>You see 4 metrics from custom evaluators - <code>groundedness</code>,<code>fluency</code>,<code>coherence</code>,<code>relevance</code></li> <li>Each metric records a score - between <code>1</code> and <code>5</code></li> </ol> <p>Let's try to put the scores in context of the responses we see. Try these exercises:</p> <ol> <li> <p>Pick a row above that has a <code>groundedness</code> of 5.</p> <ul> <li>View the related row in the <code>result_evaluated.jsonl</code> file</li> <li>Observe related answer and context in file </li> <li> <p>Ask: was the answer grounded in the context?</p> Want to see <code>groundedness=5</code> example from a previous run? Click to expand this. <p>{\"question\": \"tell me about your hiking jackets\", \"context\": [{\"id\": \"17\", \"title\": \"RainGuard Hiking Jacket\", \"content\": \"Introducing the MountainStyle RainGuard Hiking Jacket - the ultimate solution for weatherproof comfort during your outdoor undertakings! Designed with waterproof, breathable fabric, this jacket promises an outdoor experience that's as dry as it is comfortable. The rugged construction assures durability, while the adjustable hood provides a customizable fit against wind and rain. Featuring multiple pockets for safe, convenient storage and adjustable cuffs and hem, you can tailor the jacket to suit your needs on-the-go. And, don't worry about overheating during intense activities - it's equipped with ventilation zippers for increased airflow. Reflective details ensure visibility even during low-light conditions, making it perfect for evening treks. With its lightweight, packable design, carrying it inside your backpack requires minimal effort. With options for men and women, the RainGuard Hiking Jacket is perfect for hiking, camping, trekking and countless other outdoor adventures. Don't let the weather stand in your way - embrace the outdoors with MountainStyle RainGuard Hiking Jacket!\", \"url\": \"/products/rainguard-hiking-jacket\"}, {\"id\": \"3\", \"title\": \"Summit Breeze Jacket\", \"content\": \"Discover the joy of hiking with MountainStyle's Summit Breeze Jacket. This lightweight jacket is your perfect companion for outdoor adventures. Sporting a trail-ready, windproof design and a water-resistant fabric, it's ready to withstand any weather. The breathable polyester material and adjustable cuffs keep you comfortable, whether you're ascending a mountain or strolling through a park. And its sleek black color adds style to function. The jacket features a full-zip front closure, adjustable hood, and secure zippered pockets. Experience the comfort of its inner lining and the convenience of its packable design. Crafted for night trekkers too, the jacket has reflective accents for enhanced visibility. Rugged yet chic, the Summit Breeze Jacket is more than a hiking essential, it's the gear that inspires you to reach new heights. Choose adventure, choose the Summit Breeze Jacket.\", \"url\": \"/products/summit-breeze-jacket\"}], \"answer\": \"Sure, Sarah Lee! \\ud83d\\ude0a We have two hiking jackets that you might be interested in:\\n\\n1. RainGuard Hiking Jacket: This jacket is designed with waterproof, breathable fabric to keep you dry and comfortable during your outdoor adventures. It has adjustable cuffs and hem, multiple pockets for storage, and ventilation zippers for increased airflow. The reflective details ensure visibility even in low-light conditions. It's lightweight and packable, making it easy to carry in your backpack. Perfect for hiking, camping, trekking, and more! \\ud83c\\udf27\\ufe0f\\ud83c\\udfd5\\ufe0f\\n\\n2. Summit Breeze Jacket: This lightweight jacket\", \"groundedness\": \"5\", \"fluency\": \"4\", \"coherence\": \"4\", \"relevance\": \"5\"}</p> </li> </ul> </li> <li> <p>Pick a row that has a <code>groundedness</code> of 1.</p> <ul> <li>View the related row in the <code>result_evaluated.jsonl</code> file</li> <li>Observe related answer and context in file</li> <li> <p>Ask: was THIS answer grounded in the context?</p> Want to see <code>groundedness=1</code> example from a previous run? Click to expand this. <p>{\"question\": \"I would like to return the tent I bought. It is used but I still want to return it since the roof leaks.\", \"context\": [{\"id\": \"1\", \"title\": \"TrailMaster X4 Tent\", \"content\": \"Unveiling the TrailMaster X4 Tent from OutdoorLiving, your home away from home for your next camping adventure. Crafted from durable polyester, this tent boasts a spacious interior perfect for four occupants. It ensures your dryness under drizzly skies thanks to its water-resistant construction, and the accompanying rainfly adds an extra layer of weather protection. It offers refreshing airflow and bug defence, courtesy of its mesh panels. Accessibility is not an issue with its multiple doors and interior pockets that keep small items tidy. Reflective guy lines grant better visibility at night, and the freestanding design simplifies setup and relocation. With the included carry bag, transporting this convenient abode becomes a breeze. Be it an overnight getaway or a week-long nature escapade, the TrailMaster X4 Tent provides comfort, convenience, and concord with the great outdoors. Comes with a two-year limited warranty to ensure customer satisfaction.\", \"url\": \"/products/trailmaster-x4-tent\"}, {\"id\": \"15\", \"title\": \"SkyView 2-Person Tent\", \"content\": \"Introducing the OutdoorLiving SkyView 2-Person Tent, a perfect companion for your camping and hiking adventures. This tent offers a spacious interior that houses two people comfortably, with room to spare. Crafted from durable waterproof materials to shield you from the elements, it is the fortress you need in the wild. Setup is a breeze thanks to its intuitive design and color-coded poles, while two large doors allow for easy access. Stay organized with interior pockets, and store additional gear in its two vestibules. The tent also features mesh panels for effective ventilation, and it comes with a rainfly for extra weather protection. Light enough for on-the-go adventurers, it packs compactly into a carrying bag for seamless transportation. Reflective guy lines ensure visibility at night for added safety, and the tent stands freely for versatile placement. Experience the reliability of double-stitched seams that guarantee increased durability, and rest easy under the stars with OutdoorLiving's SkyView 2-Person Tent. It's not just a tent; it's your home away from home.\", \"url\": \"/products/skyview-2-person-tent\"}], \"answer\": \"Hi Melissa! \\ud83d\\ude0a I'm sorry to hear that the TrailMaster X4 Tent you bought has a leaking roof. As a Gold member, you are eligible for returns. To initiate the return process, please contact our customer service team at [customer service number]. They will assist you further and provide you with the necessary instructions. \\ud83d\\uded2\\ud83c\\udf27\\ufe0f\", \"groundedness\": \"1\", \"fluency\": \"4\", \"coherence\": \"4\", \"relevance\": \"3\"}</p> </li> </ul> </li> </ol> <p>In the provided examples, we can see that the first response in the visualized results (<code>row 0</code>) had a groundedness of 5, while the third row from the bottom (<code>row 9</code>) had a groundedness of 1. </p> <ul> <li>In the first case, the answers provided matched the data context (tent names). </li> <li>In the second case, the answers mention real tents from the context but the question did not actually specify the name of the tent - so response was not grounded in truth.</li> </ul> <p>Explore the data in more detail on your own. Try to build your intuition for how scores are computed, and how that assessment reflects in the quality of your application.</p> <p>CONGRATULATIONS. You just looked under the hood of an AI-Assisted evaluation workflow.</p>"},{"location":"2-Homework/02-Contoso-Chat/04-Teardown/","title":"Cleanup Resources","text":""},{"location":"2-Homework/02-Contoso-Chat/04-Teardown/#1-give-us-a-on-github","title":"1. Give us a \u2b50\ufe0f on GitHub","text":"<p>FOUND THIS WORKSHOP AND SAMPLE USEFUL? MAKE SURE YOU GET UPDATES.</p> <p>The Contoso Chat sample is an actively updated project that will reflect the latest features and best practices for code-first development of RAG-based copilots on the Azure AI platform. Visit the repo or click the button below, to give us a \u2b50\ufe0f. </p> <p> Give Contoso Chat a Star!</p>"},{"location":"2-Homework/02-Contoso-Chat/04-Teardown/#2-feedback-cleanup","title":"2. Feedback &amp; Cleanup","text":"<p>Check that the right tab is selected for your session, and complete the steps!</p> Self-GuidedMicrosoft AI TourMicrosoft Ignite <p>Reminder 1: Give us Feedback</p> <p>Have feedback that can help us make this lab better for others? Open an issue and let us know.</p> <p>Reminder 1: Give us Feedback</p> <p>Visit aka.ms/MicrosoftAITour/Survey to give us feedback on this session (#WRK550)</p> <p>Reminder 2: End the Skillable Session</p> <p>Visit the Skillable Lab page and click <code>End Session</code> to end the session and release all resources. This allows the lab to be run again without quota issues for others.</p> <p>Reminder 1: Please Give us Feedback</p> <p>Visit aka.ms/MicrosoftIgniteEvals to give us feedback on this session (LAB401)</p> <p>Reminder 2: End the Skillable Session</p> <p>Visit the Skillable Lab page and click <code>End Session</code> to end the session and release all resources. This allows the lab to be run again without quota issues for others.</p>"},{"location":"2-Homework/02-Contoso-Chat/04-Teardown/#3-stop-your-codespaces","title":"3. Stop your Codespaces","text":"<p>Reminder: Delete your Codespaces instance to preserve quota</p> <ol> <li>Visit https://github.com/codespaces in your browser</li> <li>Locate the Codespaces instance you are currently running </li> <li>Delete it to prevent continued usage of the storage or processing quotas.</li> </ol> <p>If you want to save any changes you have made to files to your fork, use the Source Control tool in VS Code Online to commit and push your changes before you delete the Codespace.</p>"}]}